---
layout: post
title:      "My Sinatra Project"
date:       2020-05-18 02:56:05 +0000
permalink:  my_sinatra_project
---


This application was made for the NAS Whidbey Island Naval Survival Training Center crew. During the Covid-19 shutdown, members of the armed forces are prohibited from doing physical training with each other so some members of this center created a program to help keep people motivated to stay in shape. I wanted to create this program to help the members keep track of their progress without having to do it manually with pen and paper.

I thought that my last project was difficult... It was a piece of cake compared to this project. I put at least double the hours into this project. 

My process started out very organized and slowly turned to chaos after I started to add more and more. I started with the [Corneal gem](http://https://thebrianemory.github.io/corneal/) which was life saver! I used it create my project foundation. Then I used the commands that come with the gem to generate models and controllers and their associated views. I started with only 2 models ( user and workout ) and wanted to get that working first to meet the minimums. Later, I added the third model ( exercise ). At the end I realized that I had spelled exercise wrong throughout the whole project which I just found hilarious. 

From there, I started to create my relationships between my models. Users having many workouts and many excercises through workouts. Workouts belonging to a user and having many exercises through the additional join model, workout_exercise. Exercise having many users through workouts, and many workouts through workout_exercise. And my workout_exercise model belongs to both workout and excersise to complete the connections.

What I should have done was make sure my security measures were in place using the macro has_secure_password provided by bcrypt gem, and have the column, password_digest, in my users table, then create and run my migrations. But I did not... I created migrations for each table, users, workouts, exercises, and workout_exercises, and seeded some data to work with. Because I did not do this first, my database was all messed up and I needed to erase my database and rerun my migrations. For the purpose of this project, all of the data for the exercise table was pre seeded into the database because there was already a set of exercises that I wanted the user to select from and not have the means to add new ones.

After my database appeared to be all set, I went to work on my controllers. I first made sure that each controller was mounted in my config.ru file so that they would actually be used. Then I started on creating my routes and their associated views. In my application_controller, I made sure to enable sessions and set the secret so that the user could remain in the same session throughout their entire session. The only route I included in this controller was the home route `"/"` which was responsible for rendering the welcome page. I also included some helper methods that utilized the session id for later use in user verification so the routes can only be called if the user was logged in and that they were related to the resource. In my user_controller there is a `get` and `post` to `/signup`. The get was responsible for rendering the signup view form, and the post route took the inserted information, made sure it could create user with the information provided and display an error if not, create a user and session and take them to their workout index page `/workouts`.  The workout controller had create, read, update, and delete routes. The read routes were `get` to `/workouts` and `/workouts/:id` which were in charge of verifying the user was signed in based on the session id and rendering the correct pages based on their id. The create routes were the  `post` to `/workouts` and `/workouts/:id` which were in charge of taking the information the user entered in the associated view forms and creating new workouts. If a date was not entered into the date field, a error would render on the page above the text field. The update routes were `get` and `patch` to `workouts/:id/edit` and required them to be logged in, then acquired the exercises in the database and the workout that they were trying to update and render the edit form view. The patch route found the workout that they were trying to edit and updated it based on the information that the user entered in. The delete route was simply a button on the show view for a workout. It found the workout they were trying to delete and then deleted it. 

This was the first time that I have used HTML so the user interface is very simple and primitive looking, but friendly nonetheless. Throughout the entire process and each time I completed a route or view I verified that they were working using `shotgun`. That was proceded with lots lots of error fixing. Whether it was spelling errors or a missing `>` error fixing  was where most of my time was spent. It was a ton of fun... after the fact of course and I am super proud of what I have acomplished.
